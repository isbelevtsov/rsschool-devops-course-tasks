name: "K8s Management"
on:
  workflow_dispatch:

  workflow_run:
    workflows: ["Infrastructure Deployment"]
    types:
      - completed
    branches:
      - task_4

env:
  AWS_REGION: ${{ secrets.AWS_REGION }} # Set this in GitHub Secrets
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} # Set this in GitHub Secrets
  JENKINS_ADMIN_USER: ${{ secrets.JENKINS_ADMIN_USER }}
  JENKINS_ADMIN_PASSWORD: ${{ secrets.JENKINS_ADMIN_PASSWORD }}
  KUBECONFIG_PARAM_PATH: ${{ secrets.KUBECONFIG_PARAM_PATH }} # Set this in GitHub Secrets
  TASK_DIR: task_4/project

permissions:
  id-token: write  # Required for OIDC token exchange
  contents: read   # Required to checkout the repo
  pull-requests: write  # Required to comment on PRs

jobs:
  deploy_jenkins:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GithubActionRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-k8s-management

      - name: Get GitHub Runner IP
        id: runner_ip
        run: |
          echo "RUNNER_IP=$(curl -s https://checkip.amazonaws.com)/32" >> $GITHUB_ENV

      - name: Save Bastion SG ID
        run: |
          echo "BASTION_SG_ID=$(aws ec2 describe-security-groups --filters "Name=tag:Name,Values=*bastion*" --query "SecurityGroups[*].GroupId" --output text)" >> $GITHUB_ENV
        working-directory: ${{ env.TASK_DIR }}

      - name: Add GitHub Runner IP to Security Group
        env:
          RUNNER_IP: ${{ env.RUNNER_IP }}
          BASTION_SG_ID: ${{ env.BASTION_SG_ID }}
        run: |
          echo "Adding $RUNNER_IP to Security Group ${{ env.BASTION_SG_ID }}"
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ env.BASTION_SG_ID }} \
            --protocol tcp \
            --port 6443 \
            --cidr $RUNNER_IP

      - name: Set up Kubeconfig
        run: |
          aws ssm get-parameter \
            --name "${{ env.KUBECONFIG_PARAM_PATH }}" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text > kubeconfig
                chmod 600 kubeconfig
          sed -i "s|^\( *server: https://\)[^:]*|\1k8s.elysium-space.com|" kubeconfig
          echo "export KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
        working-directory: ${{ env.TASK_DIR }}/kubernetes

      - name: Debug kubeconfig existence
        run: |
          ls -lah kubeconfig
          cat kubeconfig | head -n 5
        working-directory: ${{ env.TASK_DIR }}/kubernetes

      - name: Install helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: v3.18.3

      - name: Create Jenkins Namespace
        run: |
          if ! kubectl get namespace jenkins \
              --kubeconfig kubeconfig > /dev/null 2>&1; then
            echo "Namespace 'jenkins' does not exist. Creating..."
            kubectl create namespace jenkins \
              --dry-run=client -o yaml \
              --kubeconfig kubeconfig | \
            kubectl apply -f - --kubeconfig kubeconfig
          else
            echo "Namespace 'jenkins' already exists. Skipping creation."
          fi
        working-directory: ${{ env.TASK_DIR }}/kubernetes

      - name: Create Jenkins Admin Secret
        run: |
          kubectl create secret generic jenkins-admin \
            --namespace jenkins \
            --from-literal=jenkins-admin-user="${{ env.JENKINS_ADMIN_USER }}" \
            --from-literal=jenkins-admin-password="${{ env.JENKINS_ADMIN_PASSWORD }}" \
            --dry-run=client -o yaml \
            --kubeconfig kubeconfig | \
          kubectl apply -f - --kubeconfig kubeconfig
        working-directory: ${{ env.TASK_DIR }}/kubernetes

      - name: Apply Persistent Storage Configuration (Optional)
        run: |
          kubectl apply -f jenkins_storage_class.yaml -n jenkins --kubeconfig kubeconfig
          kubectl apply -f jenkins_pv.yaml -n jenkins --kubeconfig kubeconfig
          kubectl apply -f jenkins_pvc.yaml -n jenkins --kubeconfig kubeconfig
        working-directory: ${{ env.TASK_DIR }}/kubernetes

      - name: Deploy Jenkins with Helm
        run: |
          helm repo add jenkins https://charts.jenkins.io
          helm repo update
          helm upgrade --install my-jenkins jenkins/jenkins \
          --namespace jenkins \
          --values jenkins_values.yaml \
          --kubeconfig kubeconfig
        working-directory: ${{ env.TASK_DIR }}/kubernetes

      - name: Apply Jenkins Ingress (Optional)
        run: |
          kubectl apply -f jenkins_ingress.yaml -n jenkins --kubeconfig kubeconfig
        working-directory: ${{ env.TASK_DIR }}/kubernetes

      - name: Collect Jenkins Deployment Info
        id: jenkins-info
        run: |
          echo '::group::kubectl get svc -n jenkins --kubeconfig kubeconfig'
          kubectl get svc -n jenkins --kubeconfig kubeconfig > svc.txt
          cat svc.txt
          echo '::endgroup::'

          echo '::group::helm status my-jenkins -n jenkins --kubeconfig kubeconfig'
          helm status my-jenkins -n jenkins --kubeconfig kubeconfig > status.txt
          cat status.txt
          echo '::endgroup::'

          echo "svc_output<<EOF" >> $GITHUB_OUTPUT
          cat svc.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "helm_output<<EOF" >> $GITHUB_OUTPUT
          cat status.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TASK_DIR }}/kubernetes

      - name: Remove IP from Security Group
        if: success()
        env:
          RUNNER_IP: ${{ env.RUNNER_IP }}
          BASTION_SG_ID: ${{ env.BASTION_SG_ID }}
        run: |
          echo "Removing $RUNNER_IP from Security Group ${{ env.BASTION_SG_ID }}"
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ env.BASTION_SG_ID }} \
            --protocol tcp \
            --port 6443 \
            --cidr $RUNNER_IP

      - name: Comment Jenkins Deployment Info on PR
        if: success()
        uses: actions/github-script@v7
        env:
          svc_output: ${{ steps.jenkins-info.outputs.svc_output }}
          helm_output: ${{ steps.jenkins-info.outputs.helm_output }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { svc_output, helm_output } = process.env;
            const body = `
            ### ðŸš€ Jenkins Deployment Status

            #### ðŸ§­ Helm Status:
            \`\`\`
            ${helm_output}
            \`\`\`

            #### ðŸ›° Service Info:
            \`\`\`
            ${svc_output}
            \`\`\`

            _Workflow: \`${{ github.workflow }}\`, Commit: \`${context.sha.slice(0, 7)}\`_`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(c => c.user.type === "Bot" && c.body.includes("Jenkins Deployment Status"));

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
