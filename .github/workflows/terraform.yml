name: Terraform Plan and Apply

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  TASK: task_2
  TF_VERSION: ${{ secrets.TF_VERSION }} # Set this in GitHub Secrets
  AWS_REGION: ${{ secrets.AWS_REGION }} # Set this in GitHub Secrets
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} # Set this in GitHub Secrets
  VPC_CIDR: ${{ secrets.VPC_CIDR }} # Set this in GitHub Secrets
  AZS: ${{ secrets.AZS }} # Set this in GitHub Secrets
  PUBLIC_SUBNET_CIDRS: ${{ secrets.PUBLIC_SUBNET_CIDRS }} # Set this in GitHub Secrets
  PRIVATE_SUBNET_CIDRS: ${{ secrets.PRIVATE_SUBNET_CIDRS }} # Set this in GitHub Secrets
  ALLOWED_SSH_CIDR: ${{ secrets.ALLOWED_SSH_CIDR }} # Set this in GitHub Secrets
  KEY_PAIR: ${{ secrets.KEY_PAIR }} # Set this in GitHub Secrets
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub token for commenting on PRs

permissions:
  id-token: write  # Required for OIDC token exchange
  contents: read   # Required to checkout the repo
  pull-requests: write  # Required to comment on PRs
  actions: read   # Required to upload artifacts
  issues: write   # Required to comment on issues
  checks: write   # Required to update checks on PRs
  statuses: write # Required to update commit statuses

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GithubActionRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TASK }}/project

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TASK }}/project

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=output.tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -var="vpc_cidr=${{ env.VPC_CIDR }}" \
            -var="azs=${{ env.AZS }}" \
            -var="public_subnet_cidrs=${{ env.PUBLIC_SUBNET_CIDRS }}" \
            -var="private_subnet_cidrs=${{ env.PRIVATE_SUBNET_CIDRS }}" \
            -var="allowed_ssh_cidr=${{ env.ALLOWED_SSH_CIDR }}" \
            -var="key_pair=${{ env.KEY_PAIR }}"
        working-directory: ${{ env.TASK }}/project

      - name: Terraform Show to file
        if: github.event_name == 'pull_request'
        run: terraform show -no-color output.tfplan > tfplan.txt
        working-directory: ${{ env.TASK }}/project

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            output.tfplan
            tfplan.txt

      - name: Comment Plan on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TASK }}/project\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }


  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GithubActionRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TASK }}/project

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan

      - name: Terraform Apply
        run: terraform apply -auto-approve output.tfplan
        working-directory: ${{ env.TASK }}/project

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GithubActionRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TASK }}/project

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -var="vpc_cidr=${{ env.VPC_CIDR }}" \
            -var="azs=${{ env.AZS }}" \
            -var="public_subnet_cidrs=${{ env.PUBLIC_SUBNET_CIDRS }}" \
            -var="private_subnet_cidrs=${{ env.PRIVATE_SUBNET_CIDRS }}" \
            -var="allowed_ssh_cidr=${{ env.ALLOWED_SSH_CIDR }}" \
            -var="key_pair=${{ env.KEY_PAIR }}"
        working-directory: ${{ env.TASK }}/project
