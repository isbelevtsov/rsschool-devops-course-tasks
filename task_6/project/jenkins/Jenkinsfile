pipeline {
  agent {
    kubernetes {
      label 'buildah-agent'
      defaultContainer 'buildah'
    }
  }

  environment {
    GIT_REPO = 'https://github.com/isbelevtsov/rsschool-devops-course-tasks.git'
    GIT_BRANCH = 'task_6'
    IMAGE_NAME = 'isbelevtsov/flask-app'
    IMAGE_TAG = 'latest'
    EMAIL_RECIPIENT = 'isbelevtsov@gmail.com'
  }

  stages {
    stage('Checkout Repository') {
      steps {
        git branch: "$GIT_BRANCH",
        url: "$GIT_REPO",
        credentialsId: 'GH_JENKINS_TOKEN'
      }
    }

    stage('Install Required Packages') {
      steps {
        sh '''
          echo "Installing required packages..."
          dnf install -y python3 python3-pip curl unzip helm kubectl
          pip install -r task_6/project/app/requirements.txt pytest
        '''
      }
    }

    stage('Run Unit Test') {
      steps {
        sh '''
          echo "Running unit tests..."
          pytest task_6/project/app/test_app.py
        '''
      }
    }

    stage('Run SonarQube Security Check') {
      steps {
        withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
          sh '''
            echo "Running SonarQube security check..."
            export SONAR_SCANNER_VERSION=7.0.2.4839
            export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux-x64
            curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux-x64.zip
            unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
            export PATH=$SONAR_SCANNER_HOME/bin:$PATH
            export SONAR_SCANNER_OPTS="-server"
            sonar-scanner \
              -Dsonar.organization=isbelevtsov \
              -Dsonar.projectKey=isbelevtsov_rsschool-devops-course-tasks \
              -Dsonar.sources=task_6/project/app/ \
              -Dsonar.host.url=https://sonarcloud.io
          '''
        }
      }
    }

    // stage('Manual Approval to Build Image') {
    //   steps {
    //     input message: 'Approve to build and push Docker image to Dockerhub?'
    //   }
    // }

    stage('Build with Buildah') {
      steps {
        sh '''
          echo "Building the Docker image with Buildah..."
          buildah bud -t $IMAGE_NAME:$IMAGE_TAG -f task_6/project/app/Dockerfile task_6/project/app
        '''
      }
    }

    stage('Push Image to ECR') {
      steps {
        sh '''
          echo "Pushing the Docker image to Amazon ECR..."
          buildah tag $IMAGE_NAME:$IMAGE_TAG $ECR_REPO_URI/$IMAGE_NAME:$IMAGE_TAG
          buildah push $IMAGE_NAME:$IMAGE_TAG docker://$ECR_REPO_URI/$IMAGE_NAME:$IMAGE_TAG
        '''
      }
    }

    stage('Get ECR Scan Results') {
      steps {
        sh '''
          echo "Fetching scan results for $IMAGE_NAME:$IMAGE_TAG"

          IMAGE_DIGEST=$(aws ecr describe-images \
              --region $AWS_REGION \
              --repository-name $IMAGE_NAME \
              --image-ids imageTag=$IMAGE_TAG \
              --query 'imageDetails[0].imageDigest' \
              --output text)

          sleep 10
          echo "Waiting for scan to complete..."
          for i in {1..20}; do
            STATUS=$(aws ecr describe-image-scan-findings \
                --region $AWS_REGION \
                --repository-name $IMAGE_NAME \
                --image-id imageDigest=$IMAGE_DIGEST \
                --query 'imageScanStatus.status' \
                --output text)

            echo "Current scan status: $STATUS"
            if [ "$STATUS" == "COMPLETE" ]; then
              echo "Scan complete!"
              break
            fi

            if [ "$STATUS" == "FAILED" ]; then
              echo "Scan failed!"
              exit 1
            fi

          done

          echo "Scan results for $IMAGE_NAME:$IMAGE_TAG:"
          aws ecr describe-image-scan-findings \
              --region $AWS_REGION \
              --repository-name $IMAGE_NAME \
              --image-id imageDigest=$IMAGE_DIGEST \
              --query 'imageScanFindings.findings[*].[name,severity,uri]' \
              --output table
        '''
      }
    }

    stage('Deploy Flask Helm Chart to K8s with Helm') {
      steps {
        withCredentials([file(credentialsId: 'KUBECONFIG_FILE', variable: 'KUBECONFIG')]) {
          sh '''
            echo "Deploying application using Helm..."
            cd task_6/project/helm/flask-app
            helm upgrade --install flask-app . \
              --namespace flask-app \
              --create-namespace \
              --values values.yaml
          '''
        }
      }
    }

    stage('Verify Application Deployment') {
      steps {
        sh '''
          echo "Verifying application deployment..."
          for i in {1..10}; do
            if curl -sSf http://flask.aws.elysium-space.com; then
              echo "Application is up!"
              exit 0
            else
              echo "Waiting for application to become ready..."
              sleep 5
            fi
          done

          echo "Application verification failed."
          exit 1
        '''
      }
    }
  }

  post {
    success {
      mail to: '${EMAIL_RECIPIENT}',
        subject: "✅ SUCCESS: Job '${env.JOB_NAME}' (#${env.BUILD_NUMBER})",
        body: "Job completed successfully!\n\nSee details: ${env.BUILD_URL}"
    }
    failure {
      mail to: '${EMAIL_RECIPIENT}',
        subject: "❌ FAILURE: Job '${env.JOB_NAME}' (#${env.BUILD_NUMBER})",
        body: "Job failed. Please review the logs:\n\n${env.BUILD_URL}"
    }
    unstable {
      mail to: '${EMAIL_RECIPIENT}',
        subject: "⚠️ UNSTABLE: Job '${env.JOB_NAME}' (#${env.BUILD_NUMBER})",
        body: "Job is unstable.\n\nDetails: ${env.BUILD_URL}"
    }
  }
}
