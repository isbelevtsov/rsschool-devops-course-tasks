pipeline {
  agent { label 'kaniko-agent' }

  environment {
    APP_NAME = 'flask-k8s-app'
    IMAGE_TAG = "${env.BUILD_NUMBER}"
    ECR_REGISTRY = '123456789012.dkr.ecr.us-east-1.amazonaws.com'
    SONARQUBE_ENV = 'SonarQube'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Unit Tests') {
      agent { label 'jenkins-agent' }
      steps {
        sh 'python3 -m venv venv && source venv/bin/activate && pip install flask pytest && pytest tests/'
      }
    }

    stage('SonarQube Scan') {
      agent { label 'jenkins-agent' }
      environment {
        SONAR_TOKEN = credentials('SONAR_TOKEN')
      }
      steps {
        withSonarQubeEnv("${SONARQUBE_ENV}") {
          sh '''
          sonar-scanner \
            -Dsonar.projectKey=flask-k8s-app \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN
          '''
        }
      }
    }

    stage('Manual Approval to Build Image') {
      steps {
        input message: 'Approve to build and push Docker image to ECR?'
      }
    }

    stage('Build and Push Docker Image to ECR') {
      steps {
        container('kaniko') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'AWS_ECR_CREDS'
          ]]) {
            sh '''
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
              /kaniko/executor \
                --context `pwd` \
                --dockerfile ./Dockerfile \
                --destination $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG \
                --destination $ECR_REGISTRY/$APP_NAME:latest
            '''
          }
        }
      }
    }

    stage('Deploy to K8s via Helm') {
      steps {
        sh '''
        helm upgrade --install $APP_NAME ./helm-chart \
          --set image.repository=$ECR_REGISTRY/$APP_NAME \
          --set image.tag=$IMAGE_TAG \
          --namespace default
        '''
      }
    }
  }
}
